// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import {EncryptedR1CS} from "../src/EncryptedR1CS.sol";
// import "../src/EncryptedR1CS.sol";

contract EncryptedR1CSTest is Test {
    EncryptedR1CS public encryptedr1cs;

    function setUp() public {
        encryptedr1cs = new EncryptedR1CS();
    }
    // create a matrix of points
    // create vectors of points
    // loop through 1 row of matrix points, scalar multiply each point with witness vector and corresponding g point, add together
    // result should be 1 point representing addition of points
    // reserve for pairing
    
    uint256 CURVE_ORDER = 21888242871839275222246405745257275088548364400416034343698204186575808495617;

    function testPairing2by2Matrix() public view {
        uint256[4][2] matrixL = [[0, 0, 1, 0], [0, 0, 0, 1]];
        uint256[4][2] matrixR = [[0, 0, 1, 0], [0, 0, 1, 0]];
        uint256[4][2] matrixO = [
            [uint256(0), uint256(0), uint256(0), uint256(1)],
            [uint256(CURVE_ORDER - 5), uint256(1), uint256(CURVE_ORDER - 1), uint256(0)]
        ];

        // uint256[4] witness = [1, 35, 3, 9];
        EncryptedR1CS.G1Point memory W1G1 = EncryptedR1CS.G1Point(1,2);
        EncryptedR1CS.G1Point memory W2G1 = EncryptedR1CS.G1Point(19603121658858655875247255127227546065511167701958109023745805570144594432590, 18396643206309242224060210403331962159520263222429416365150105776739848612253);
        EncryptedR1CS.G1Point memory W3G1 = EncryptedR1CS.G1Point(3353031288059533942658390886683067124040920775575537747144343083137631628272, 19321533766552368860946552437480515441416830039777911637913418824951667761761);
        EncryptedR1CS.G1Point memory W4G1 = EncryptedR1CS.G1Point(1624070059937464756887933993293429854168590106605707304006200119738501412969, 3269329550605213075043232856820720631601935657990457502777101397807070461336);
        
        G1Point[4] g1Array = [W1G1, W2G1, W3G1, W4G1];
        
        //Convert py_ecc to G2 like this: py_ecc = ((x1,x2),(y1,y2)) => G2Point here is ([x2,x1],[y2,y1])
        EncryptedR1CS.G2Point memory W1G2 = EncryptedR1CS.G2Point([11559732032986387107991004021392285783925812861821192530917403151452391805634,10857046999023057135944570762232829481370756359578518086990519993285655852781],[4082367875863433681332203403145435568316851327593401208105741076214120093531,8495653923123431417604973247489272438418190587263600148770280649306958101930 ]);
        EncryptedR1CS.G2Point memory W2G2 = EncryptedR1CS.G2Point([18566624402818881964861655783414145255231663551674096096716018827885921866024,15646841566952864952593773541008193313799794600490253856365170168062051389557],[4097024366020518449718368252250768914082116359001049867458990550435849429351,21315885373453924306200158010742738904982700039804587299932084887593623999206 ]);
        EncryptedR1CS.G2Point memory W3G2 = EncryptedR1CS.G2Point([7273165102799931111715871471550377909735733521218303035754523677688038059653,2725019753478801796453339367788033689375851816420509565303521482350756874229 ],[957874124722006818841961785324909313781880061366718538693995380805373202866,2512659008974376214222774206987427162027254181373325676825515531566330959255 ]);
        EncryptedR1CS.G2Point memory W4G2 = EncryptedR1CS.G2Point([4821341333500639427117806840255663771228880693152568023710381392280915109763,13193736976255674115506271204866518055492249136949196233486205080643750676277 ],[5830427496645529367349790160167113194176899755997018131088404969293864912751,18281872490245496509379794148214936771631698359916681711594256455596877716636 ]);

        G1Point[4] g2Array = [W1G2, W2G2, W3G2, W4G2];
    }
}
